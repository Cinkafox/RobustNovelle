using System;
using System.Numerics;
using Cinka.Game.Gameplay;
using Robust.Client;
using Robust.Client.Animations;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.State;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Animations;
using Robust.Shared.Configuration;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Log;
using Robust.Shared.Utility;

namespace Cinka.Game.Menu.UI;

[GenerateTypedNameReferences]
public sealed partial class MenuScreen : UIScreen
{
    [Dependency] private readonly IStateManager _stateManager = default!;
    [Dependency] private readonly IGameController _gameController = default!;
    
    public MenuScreen()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        SetAnchorPreset(MainContainer, LayoutPreset.Wide);
        SetAnchorPreset(Background, LayoutPreset.Wide);
        
        IoCManager.Resolve<IConfigurationManager>().OnValueChanged(CCVars.CCVars.BackroundMenu,OnBackroundChanged,true);
        
        PlayButton.OnPressed += PlayButtonOnOnPressed;
        Exit.OnPressed += OnExitPressed;
        
        MenuLabel.SetMessage(FormattedMessage.FromMarkup(Loc.GetString("menu-label")));
    }

    private void OnExitPressed(BaseButton.ButtonEventArgs obj)
    {
        _gameController.Shutdown("user exit");
    }

    private void PlayButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        _stateManager.RequestStateChange<GameplayStateBase>();
    }
    
    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        PlayButton.OnPressed -= PlayButtonOnOnPressed;
        Exit.OnPressed -= OnExitPressed;
        IoCManager.Resolve<IConfigurationManager>().UnsubValueChanged(CCVars.CCVars.BackroundMenu,OnBackroundChanged);
    }

    private void OnBackroundChanged(string path)
    {
        Background.Texture = IoCManager.Resolve<IResourceCache>().GetResource<TextureResource>(path).Texture;
    }
}