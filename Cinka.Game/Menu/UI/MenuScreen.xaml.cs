using System;
using System.Numerics;
using Cinka.Game.Gameplay;
using Robust.Client;
using Robust.Client.Animations;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.State;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Animations;
using Robust.Shared.Configuration;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Utility;

namespace Cinka.Game.Menu.UI;

[GenerateTypedNameReferences]
public sealed partial class MenuScreen : UIScreen
{
    [Dependency] private readonly IStateManager _stateManager = default!;
    [Dependency] private readonly IGameController _gameController = default!;
    
    [Animatable]
    public Vector2 MenuLabelPos
    {
        get => MenuLabel.Position;
        set => SetPosition(MenuLabel, value);
    }
    
    [Animatable]
    public Vector2 ButtonsPos
    {
        get => ButtonContainer.Position;
        set => SetPosition(ButtonContainer, value);
    }
    
    private Animation _cullAnim = new()
    {
        Length = TimeSpan.FromSeconds(1),
        AnimationTracks =
        {
            new AnimationTrackControlProperty()
            {
                Property = nameof(MenuLabelPos),
                InterpolationMode = AnimationInterpolationMode.Cubic,
                KeyFrames =
                {
                    new AnimationTrackProperty.KeyFrame(new Vector2(-1500, 0),0.1f),
                    new AnimationTrackProperty.KeyFrame(new Vector2(55, 0),0.3f),
                    new AnimationTrackProperty.KeyFrame(new Vector2(0, 0),0.4f),
                }
            },
            new AnimationTrackControlProperty()
            {
                Property = nameof(ButtonsPos),
                InterpolationMode = AnimationInterpolationMode.Cubic,
                KeyFrames =
                {
                    new AnimationTrackProperty.KeyFrame(new Vector2(-1500, 70),0.3f),
                    new AnimationTrackProperty.KeyFrame(new Vector2(55, 70),0.3f),
                    new AnimationTrackProperty.KeyFrame(new Vector2(0, 70),0.4f),
                }
            }
        }
    };

    private readonly string _cullAnimKey = "fuck";
    private bool _resizeFirstTime = true;
    
    public MenuScreen()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        
        SetAnchorPreset(MainContainer, LayoutPreset.Wide);
        SetAnchorPreset(Background, LayoutPreset.Wide);
        
        IoCManager.Resolve<IConfigurationManager>().OnValueChanged(CCVars.CCVars.BackroundMenu,OnBackroundChanged,true);
        
        PlayButton.OnPressed += PlayButtonOnOnPressed;
        Exit.OnPressed += OnExitPressed;
        
        Config.OnPressed += _ => PlayAnimation(_cullAnim,_cullAnimKey);
        MenuLabel.SetMessage(FormattedMessage.FromMarkup(Loc.GetString("menu-label")));
    }
    protected override void Resized()
    {
        base.Resized();
        if (HasRunningAnimation(_cullAnimKey) || !_resizeFirstTime) return;
        
        PlayAnimation(_cullAnim, _cullAnimKey);
        _resizeFirstTime = false;
    }

    private void OnExitPressed(BaseButton.ButtonEventArgs obj)
    {
        _gameController.Shutdown("user exit");
    }

    private void PlayButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        _stateManager.RequestStateChange<GameplayStateBase>();
    }
    
    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        PlayButton.OnPressed -= PlayButtonOnOnPressed;
        Exit.OnPressed -= OnExitPressed;
        IoCManager.Resolve<IConfigurationManager>().UnsubValueChanged(CCVars.CCVars.BackroundMenu,OnBackroundChanged);
    }

    private void OnBackroundChanged(string path)
    {
        Background.Texture = IoCManager.Resolve<IResourceCache>().GetResource<TextureResource>(path).Texture;
    }
}