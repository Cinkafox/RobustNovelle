using System.Collections.Generic;
using System.Linq;
using Cinka.Game.Dialog.Data;
using Cinka.Game.Dialog.DialogActions;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.RichText;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Utility;
using Serilog.Core;
using Logger = Robust.Shared.Log.Logger;

namespace Cinka.Game.UserInterface.Systems.Dialog.Widgets;

[GenerateTypedNameReferences]
public sealed partial class DialogGui : UIWidget
{
    private readonly DialogUIController _dialogUiController;
    private List<IDialogAction> _actions = new ();
    private List<DialogButton> _buttons = new();
    private FormattedMessage _currentMessage = new();

    private DialogStyle _dialogStyle = default!;
    private DialogStyle _buttonStyle = default!;

    public DialogGui()
    {
        RobustXamlLoader.Load(this);
        _dialogUiController = UserInterfaceManager.GetUIController<DialogUIController>();
        _dialogUiController.RegisterDialog(this);
        
        Text.SetMessage(_currentMessage,defaultColor:_dialogStyle.TextColor);
        
        _dialogUiController.MessageEnded += OnMessageEnded;
    }

    public void SetStyle(DialogStyle dialogStyle, DialogStyle buttonStyle)
    {
        _dialogStyle = dialogStyle;
        _buttonStyle = buttonStyle;
        
        Text.HorizontalAlignment = dialogStyle.HorizontalAlignment;
        
        InitDialogStyle(_dialogStyle,SkipContainer);
    }
    

    public bool IsEmpty => _currentMessage.IsEmpty;


    private void OnMessageEnded(Game.Dialog.Data.Dialog dialog)
    {
        _actions = dialog.Actions.ToList();
        
        if (dialog.SkipDialog)
        {
            SkipMessage();
            return;
        }
        
        if (dialog.Buttons.Count == 0) 
            AddButton(new DialogButton(){Name = Loc.GetString("dialog-continue")});
        else
        {
            foreach (var button in dialog.Buttons)
            {
                AddButton(button);
            }  
        }
    }

    private void Act()
    {
        foreach (var action in _actions) action.Act();
        _actions = new List<IDialogAction>();
    }

    public void SkipMessage()
    {
        _actions.Add(new DefaultDialogAction());
        Act();
    }

    public void AppendLetter(char let)
    {
        _currentMessage.AddText(let.ToString());
        Text.SetMessage(_currentMessage,defaultColor:_dialogStyle.TextColor);
    }

    public FormattedMessage AppendLabel(string? text = null)
    {
        if (text != null)
            _currentMessage.AddMessage(FormattedMessage.FromMarkup(Loc.GetString(text)));
        
        return _currentMessage;
    }

    public void InvokeButton()
    {
        if (_buttons.Count == 1)
        {
            _buttons[0].DialogAction.Act();
        }
    }

    public void AddButton(DialogButton button)
    {
        var btn = new Button();
        btn.Text = button.Name;
        btn.OnPressed += _ => button.DialogAction.Act();
        btn.Margin = new Thickness(12, 0, 12, 0);
        ButtonContainer.AddChild(btn);
        _buttons.Add(button);
    }

    public void ClearText()
    {
        _currentMessage.Clear();
        ClearButtons();
    }

    public void ClearButtons()
    {
        ButtonContainer.DisposeAllChildren();
        _buttons.Clear();
    }

    public void InitDialogStyle(DialogStyle dialogStyle, PanelContainer container)
    {
        SkipContainer.ModulateSelfOverride = dialogStyle.BackgroundModulate;
        var backgroundImage = StaticIoC.ResC.GetResource<TextureResource>(dialogStyle.BackgroundPath);

        var backgroundImageMode = StyleBoxTexture.StretchMode.Stretch;
        var backgroundPatchMargin = dialogStyle.BackgroundPatchMargin;
        var margin = dialogStyle.Margin;
        container.PanelOverride = new StyleBoxTexture
        {
            Texture = backgroundImage,
            Mode = backgroundImageMode,
            PatchMarginLeft = backgroundPatchMargin.Left,
            PatchMarginBottom = backgroundPatchMargin.Bottom,
            PatchMarginRight = backgroundPatchMargin.Right,
            PatchMarginTop = backgroundPatchMargin.Top,
            
            ExpandMarginLeft = margin.Left,
            ExpandMarginBottom = margin.Bottom,
            ExpandMarginRight = margin.Right,
            ExpandMarginTop = margin.Top
        };
        
        container.InvalidateArrange();
    }
}